{
  "imports": {
    "class": "imports",
    "HP-ICF-OID": [
      "icf",
      "hp"
    ],
    "SNMPv2-CONF": [
      "OBJECT-GROUP",
      "NOTIFICATION-GROUP",
      "MODULE-COMPLIANCE"
    ],
    "SNMPv2-SMI": [
      "IpAddress",
      "MibIdentifier",
      "Gauge32",
      "OBJECT-IDENTITY",
      "iso",
      "Integer32",
      "Counter32",
      "NOTIFICATION-TYPE",
      "OBJECT-TYPE",
      "MODULE-IDENTITY",
      "TimeTicks",
      "Counter64",
      "Unsigned32",
      "Bits"
    ],
    "SNMPv2-TC": [
      "RowPointer",
      "TEXTUAL-CONVENTION",
      "AutonomousType",
      "DisplayString",
      "TAddress",
      "TDomain",
      "TimeStamp"
    ]
  },
  "hpEntityMIB": {
    "name": "hpEntityMIB",
    "oid": "1.3.6.1.4.1.11.2.14.9",
    "class": "moduleidentity",
    "revisions": [
      {
        "revision": "2000-11-03 06:36",
        "description": "Update division name. Since this MIB was only supported on a single product, and all subsequent products now support the IETF Entity MIB, mark the entire MIB as obsolete."
      },
      {
        "revision": "1997-03-06 03:26",
        "description": "Uncommented NOTIFICATION-GROUP, and add import."
      },
      {
        "revision": "1996-09-06 21:35",
        "description": "Initial (and probably only) revision of this MIB module. Released with the AdvanceStack 10BaseT Switching Hubs."
      }
    ],
    "lastupdated": "200011030636Z",
    "organization": "Hewlett Packard Company, Network Infrastructure Solutions",
    "contactinfo": "Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747",
    "description": "The MIB module for representing multiple logical entities supported by a single SNMP agent. This is an exact copy of draft 7 of the IETF Entity MIB. The only changes are to actually assign an OID to it, and add hp to the beginning of all the labels. This was done only because a product that uses this MIB is scheduled to ship before the IETF MIB will be published as an RFC, and we needed to give it an OID. It is expected that this MIB module will only be supported until the IETF actually publishes the official version as an RFC. At that time, we will support the IETF version of this MIB."
  },
  "hpEntityMIBObjects": {
    "name": "hpEntityMIBObjects",
    "oid": "1.3.6.1.4.1.11.2.14.9.1",
    "class": "objectidentity"
  },
  "hpEntityPhysical": {
    "name": "hpEntityPhysical",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.1",
    "class": "objectidentity"
  },
  "hpEntityLogical": {
    "name": "hpEntityLogical",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.2",
    "class": "objectidentity"
  },
  "hpEntityMapping": {
    "name": "hpEntityMapping",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.3",
    "class": "objectidentity"
  },
  "hpEntityGeneral": {
    "name": "hpEntityGeneral",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.4",
    "class": "objectidentity"
  },
  "PhysicalIndex": {
    "name": "PhysicalIndex",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 2147483647
          }
        ]
      }
    },
    "status": "current",
    "description": "An arbitrary value which uniquely identifies the physical entity. The value is a small positive integer; index values for different physical entities are not necessarily contiguous."
  },
  "PhysicalClass": {
    "name": "PhysicalClass",
    "class": "textualconvention",
    "type": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "enumeration": {
          "other": 1,
          "unknown": 2,
          "chassis": 3,
          "backplane": 4,
          "container": 5,
          "powerSupply": 6,
          "fan": 7,
          "sensor": 8,
          "module": 9,
          "port": 10
        }
      }
    },
    "status": "current",
    "description": "An enumerated value which provides an indication of the general hardware type of a particular physical entity."
  },
  "hpEntPhysicalTable": {
    "name": "hpEntPhysicalTable",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.1.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "obsolete",
    "description": "This table contains one row per physical entity. There is always at least one row for an 'overall' physical entity."
  },
  "hpEntPhysicalEntry": {
    "name": "hpEntPhysicalEntry",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.1.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntPhysicalIndex",
        "implied": 0
      }
    ],
    "status": "obsolete",
    "description": "Information about a particular physical entity. Each entry provides objects (hpEntPhysicalDescr, hpEntPhysicalVendorType, and hpEntPhysicalClass) to help an NMS identify and characterize the entry, and objects (hpEntPhysicalContainedIn and hpEntPhysicalParentRelPos) to help an NMS relate the particular entry to other entries in this table."
  },
  "hpEntPhysicalIndex": {
    "name": "hpEntPhysicalIndex",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.1.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "PhysicalIndex",
      "class": "type"
    },
    "maxaccess": "not-accessible",
    "status": "obsolete",
    "description": "The index for this entry."
  },
  "hpEntPhysicalDescr": {
    "name": "hpEntPhysicalDescr",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.1.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "A textual description of physical entity. This object should contain a string which identifies the manufacturer's name for the physical entity, and should be set to a distinct value for each version or model of the physical entity. "
  },
  "hpEntPhysicalVendorType": {
    "name": "hpEntPhysicalVendorType",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.1.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "AutonomousType",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "An indication of the vendor-specific hardware type of the physical entity. Note that this is different from the definition of MIB-II's sysObjectID. An agent should set this object to a enterprise-specific registration identifier value indicating the specific equipment type in detail. The associated instance of hpEntPhysicalClass is used to indicate the general type of hardware device. If no vendor-specific registration identifier exists for this physical entity, or the value is unknown by this agent, then the value { 0 0 } is returned."
  },
  "hpEntPhysicalContainedIn": {
    "name": "hpEntPhysicalContainedIn",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.1.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 2147483647
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "The value of hpEntPhysicalIndex for the physical entity which 'contains' this physical entity. A value of zero indicates this physical entity is not contained in any other physical entity. Note that the set of 'containment' relationships define a strict hierarchy; that is, recursion is not allowed."
  },
  "hpEntPhysicalClass": {
    "name": "hpEntPhysicalClass",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.1.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "PhysicalClass",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "An indication of the general hardware type of the physical entity. An agent should set this object to the standard enumeration value which most accurately indicates the general class of the physical entity, or the primary class if there is more than one. If no appropriate standard registration identifier exists for this physical entity, then the value 'other(1)' is returned. If the value is unknown by this agent, then the value 'unknown(2)' is returned."
  },
  "hpEntPhysicalParentRelPos": {
    "name": "hpEntPhysicalParentRelPos",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.1.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": -1,
            "max": 2147483647
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "An indication of the relative position of this 'child' component among all its 'sibling' components. Sibling components are defined as hpEntPhysicalEntries which share the same instance values of each of the hpEntPhysicalContainedIn and hpEntPhysicalClass objects. An NMS can use this object to identify the relative ordering for all sibling components of a particular parent (identified by the hpEntPhysicalContainedIn instance in each sibling entry). This value should match any external labeling of the physical component if possible. For example, for a module labeled as 'card #3', hpEntPhysicalParentRelPos should have the value '3'. If the physical position of this component does not match any external numbering or clearly visible ordering, then user documentation or other external reference material should be used to determine the parent-relative position. If this is not possible, then the the agent should assign a consistent (but possibly arbitrary) ordering to a given set of 'sibling' components, perhaps based on internal representation of the components. If the agent cannot determine the parent-relative position for some reason, or if the associated value of hpEntPhysicalContainedIn is '0', then the value '-1' is returned. Otherwise a non-negative integer is returned, indicating the parent-relative position of this physical entity. Parent-relative ordering normally starts from '1' and continues to 'N', where 'N' represents the highest positioned child entity. However, if the physical entities (e.g. slots) are labeled from a starting position of zero, then the first sibling should be associated with a hpEntPhysicalParentRelPos value of '0'. Note that this ordering may be sparse or dense, depending on agent implementation. The actual values returned are not globally meaningful, as each 'parent' component may use different numbering algorithms. The ordering is only meaningful among siblings of the same parent component. The agent should retain parent-relative position values across reboots, either through algorithmic assignment or use of non-volatile storage."
  },
  "hpEntPhysicalName": {
    "name": "hpEntPhysicalName",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.1.1.1.7",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "The textual name of the physical entity. The value of this object should be the name of the component as assigned by the local device and should be suitable for use in commands entered at the device's `console'. This might be a text name, such as `console' or a simple component number (e.g. port or module number), such as `1', depending on the physical component naming syntax of the device. If there is no local name, or this object is otherwise not applicable, then this object contains a zero-length string. Note that the value of hpEntPhysicalName for two physical entities will be the same in the event that the console interface does not distinguish between them, e.g., slot-1 and the card in slot-1."
  },
  "hpEntLogicalTable": {
    "name": "hpEntLogicalTable",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.2.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "obsolete",
    "description": "This table contains one row per logical entity. At least one entry must exist."
  },
  "hpEntLogicalEntry": {
    "name": "hpEntLogicalEntry",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.2.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntLogicalIndex",
        "implied": 0
      }
    ],
    "status": "obsolete",
    "description": "Information about a particular logical entity. Entities may be managed by this agent or other SNMP agents (possibly) in the same chassis."
  },
  "hpEntLogicalIndex": {
    "name": "hpEntLogicalIndex",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.2.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 1,
            "max": 2147483647
          }
        ]
      }
    },
    "maxaccess": "not-accessible",
    "status": "obsolete",
    "description": "The value of this object uniquely identifies the logical entity. The value is a small positive integer; index values for different logical entities are are not necessarily contiguous."
  },
  "hpEntLogicalDescr": {
    "name": "hpEntLogicalDescr",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.2.1.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "DisplayString",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "A textual description of the logical entity. This object should contain a string which identifies the manufacturer's name for the logical entity, and should be set to a distinct value for each version of the logical entity. "
  },
  "hpEntLogicalType": {
    "name": "hpEntLogicalType",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.2.1.1.3",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "AutonomousType",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "An indication of the type of logical entity. This will typically be the OBJECT IDENTIFIER name of the node in the SMI's naming hierarchy which represents the major MIB module, or the majority of the MIB modules, supported by the logical entity. For example: a logical entity of a regular host/router -> mib-2 a logical entity of a 802.1d bridge -> dot1dBridge a logical entity of a 802.3 repeater -> snmpDot3RptrMgmt If an appropriate node in the SMI's naming hierarchy cannot be identified, the value 'mib-2' should be used."
  },
  "hpEntLogicalCommunity": {
    "name": "hpEntLogicalCommunity",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.2.1.1.4",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "OCTET STRING",
      "class": "type",
      "constraints": {
        "size": [
          {
            "min": 1,
            "max": 255
          }
        ]
      }
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "An SNMPv1 or SNMPv2C community-string which can be used to access detailed management information for this logical entity. The agent should allow read access with this community string (to an appropriate subset of all managed objects) and may also choose to return a community string based on the privileges of the request used to read this object. Note that an agent may choose to return a community string with read-only privileges, even if this object is accessed with a read-write community string. However, the agent must take care not to return a community string which allows more privileges than the community string used to access this object. A compliant SNMP agent may wish to conserve naming scopes by representing multiple logical entities in a single 'main' naming scope. This is possible when the logical entities represented by the same value of hpEntLogicalCommunity have no object instances in common. For example, 'bridge1' and 'repeater1' may be part of the main naming scope, but at least one additional community string is needed to represent 'bridge2' and 'repeater2'. Logical entities 'bridge1' and 'repeater1' would be represented by sysOREntries associated with the 'main' naming scope. For agents not accessible via SNMPv1 or SNMPv2C, the value of this object is the empty-string."
  },
  "hpEntLogicalTAddress": {
    "name": "hpEntLogicalTAddress",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.2.1.1.5",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TAddress",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "The transport service address by which the logical entity receives network management traffic, formatted according to the corresponding value of hpEntLogicalTDomain. For snmpUDPDomain, a TAddress is 6 octets long, the initial 4 octets containing the IP-address in network-byte order and the last 2 containing the UDP port in network-byte order. Consult 'Transport Mappings for Version 2 of the Simple Network Management Protocol' (RFC 1906 [8]) for further information on snmpUDPDomain."
  },
  "hpEntLogicalTDomain": {
    "name": "hpEntLogicalTDomain",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.2.1.1.6",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "TDomain",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "Indicates the kind of transport service by which the logical entity receives network management traffic. Possible values for this object are presently found in the Transport Mappings for SNMPv2 document (RFC 1906 [8])."
  },
  "hpEntLPMappingTable": {
    "name": "hpEntLPMappingTable",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.3.1",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "obsolete",
    "description": "This table contains zero or more rows of logical entity to physical equipment associations. For each logical entity known by this agent, there are zero or more mappings to the physical resources which are used to realize that logical entity. An agent should limit the number and nature of entries in this table such that only meaningful and non-redundant information is returned. For example, in a system which contains a single power supply, mappings between logical entities and the power supply are not useful and should not be included. Also, only the most appropriate physical component which is closest to the root of a particular containment tree should be identified in an hpEntLPMapping entry. For example, suppose a bridge is realized on a particular module, and all ports on that module are ports on this bridge. A mapping between the bridge and the module would be useful, but additional mappings between the bridge and each of the ports on that module would be redundant (since the hpEntPhysicalContainedIn hierarchy can provide the same information). If, on the other hand, more than one bridge was utilizing ports on this module, then mappings between each bridge and the ports it used would be appropriate. Also, in the case of a single backplane repeater, a mapping for the backplane to the single repeater entity is not necessary."
  },
  "hpEntLPMappingEntry": {
    "name": "hpEntLPMappingEntry",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.3.1.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntLogicalIndex",
        "implied": 0
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntLPPhysicalIndex",
        "implied": 0
      }
    ],
    "status": "obsolete",
    "description": "Information about a particular logical entity to physical equipment association. Note that the nature of the association is not specifically identified in this entry. It is expected that sufficient information exists in the MIBs used to manage a particular logical entity to infer how physical component information is utilized."
  },
  "hpEntLPPhysicalIndex": {
    "name": "hpEntLPPhysicalIndex",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.3.1.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "PhysicalIndex",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "The value of this object identifies the index value of a particular hpEntPhysicalEntry associated with the indicated hpEntLogicalEntity."
  },
  "hpEntAliasMappingTable": {
    "name": "hpEntAliasMappingTable",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.3.2",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "obsolete",
    "description": "This table contains zero or more rows, representing mappings of logical entity and physical component to external MIB identifiers. Each physical port in the system may be associated with a mapping to an external identifier, which itself is associated with a particular logical entity's naming scope. A 'wildcard' mechanism is provided to indicate that an identifier is associated with more than one logical entity."
  },
  "hpEntAliasMappingEntry": {
    "name": "hpEntAliasMappingEntry",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.3.2.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntPhysicalIndex",
        "implied": 0
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntAliasLogicalIndexOrZero",
        "implied": 0
      }
    ],
    "status": "obsolete",
    "description": "Information about a particular physical equipment, logical entity to external identifier binding. Each logical entity/physical component pair may be associated with one alias mapping. The logical entity index may also be used as a 'wildcard' (refer to the hpEntAliasLogicalIndexOrZero object DESCRIPTION clause for details.) Note that only hpEntPhysicalIndex values which represent physical ports (i.e. associated hpEntPhysicalClass value is 'port(10)') are permitted to exist in this table."
  },
  "hpEntAliasLogicalIndexOrZero": {
    "name": "hpEntAliasLogicalIndexOrZero",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.3.2.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "INTEGER",
      "class": "type",
      "constraints": {
        "range": [
          {
            "min": 0,
            "max": 2147483647
          }
        ]
      }
    },
    "maxaccess": "not-accessible",
    "status": "obsolete",
    "description": "The value of this object uniquely identifies the logical entity which defines the naming scope for the associated instance of the 'hpEntAliasMappingIdentifier' object. If this object has a non-zero value, then it identifies the logical entity named by the same value of hpEntLogicalIndex. If this object has a value of zero, then the mapping between the physical component and the alias identifier for this hpEntAliasMapping entry is associated with all unspecified logical entities. That is, a value of zero (the default mapping) identifies any logical entity which does not have an explicit entry in this table for a particular hpEntPhysicalIndex/hpEntAliasMappingIdentifier pair. For example, to indicate that a particular interface (e.g. physical component 33) is identified by the same value of ifIndex for all logical entities, the following instance might exist: hpEntAliasMappingIdentifier.33.0 = ifIndex.5 In the event an hpEntPhysicalEntry is associated differently for some logical entities, additional hpEntAliasMapping entries may exist, e.g.: hpEntAliasMappingIdentifier.33.0 = ifIndex.6 hpEntAliasMappingIdentifier.33.4 = ifIndex.1 hpEntAliasMappingIdentifier.33.5 = ifIndex.1 hpEntAliasMappingIdentifier.33.10 = ifIndex.12 Note that entries with non-zero hpEntAliasLogicalIndexOrZero index values have precedence over any zero-indexed entry. In this example, all logical entities except 4, 5, and 10, associate physical entity 33 with ifIndex.6."
  },
  "hpEntAliasMappingIdentifier": {
    "name": "hpEntAliasMappingIdentifier",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.3.2.1.2",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "RowPointer",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "The value of this object identifies a particular conceptual row associated with the indicated hpEntPhysicalIndex and hpEntLogicalIndex pair. Since only physical ports are modeled in this table, only entries which represent interfaces or ports are allowed. If an ifEntry exists on behalf of a particular physical port, then this object should identify the associated 'ifEntry'. For repeater ports, the appropriate row in the 'rptrPortGroupTable' should be identified instead. For example, suppose a physical port was represented by hpEntPhysicalEntry.3, hpEntLogicalEntry.15 existed for a repeater, and hpEntLogicalEntry.22 existed for a bridge. Then there might be two related instances of hpEntAliasMappingIdentifier: hpEntAliasMappingIdentifier.3.15 == rptrPortGroupIndex.5.2 hpEntAliasMappingIdentifier.3.22 == ifIndex.17 It is possible that other mappings (besides interfaces and repeater ports) may be defined in the future, as required. Bridge ports are identified by examining the Bridge MIB and appropriate ifEntries associated with each 'dot1dBasePort', and are thus not represented in this table."
  },
  "hpEntPhysicalContainsTable": {
    "name": "hpEntPhysicalContainsTable",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.3.3",
    "nodetype": "table",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "status": "obsolete",
    "description": "A table which exposes the container/containee relationships between physical entities. This table provides equivalent information found by constructing the virtual containment tree for a given hpEntPhysicalTable but in a more direct format."
  },
  "hpEntPhysicalContainsEntry": {
    "name": "hpEntPhysicalContainsEntry",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.3.3.1",
    "nodetype": "row",
    "class": "objecttype",
    "maxaccess": "not-accessible",
    "indices": [
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntPhysicalIndex",
        "implied": 0
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntPhysicalChildIndex",
        "implied": 0
      }
    ],
    "status": "obsolete",
    "description": "A single container/containee relationship."
  },
  "hpEntPhysicalChildIndex": {
    "name": "hpEntPhysicalChildIndex",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.3.3.1.1",
    "nodetype": "column",
    "class": "objecttype",
    "syntax": {
      "type": "PhysicalIndex",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "The value of hpEntPhysicalIndex for the contained physical entity."
  },
  "hpEntLastChangeTime": {
    "name": "hpEntLastChangeTime",
    "oid": "1.3.6.1.4.1.11.2.14.9.1.4.1",
    "nodetype": "scalar",
    "class": "objecttype",
    "syntax": {
      "type": "TimeStamp",
      "class": "type"
    },
    "maxaccess": "read-only",
    "status": "obsolete",
    "description": "The value of sysUpTime at the time any of these events occur: * a conceptual row is created or deleted in any of these tables: - hpEntPhysicalTable - hpEntLogicalTable - hpEntLPMappingTable - hpEntAliasMappingTable - hpEntPhysicalContainsTable * any instance in the following list of objects changes value: - hpEntPhysicalDescr - hpEntPhysicalVendorType - hpEntPhysicalContainedIn - hpEntPhysicalClass - hpEntPhysicalParentRelPos - hpEntPhysicalName - hpEntLogicalDescr - hpEntLogicalType - hpEntLogicalCommunity - hpEntLogicalTAddress - hpEntLogicalTDomain - hpEntAliasMappingIdentifier "
  },
  "hpEntityMIBTraps": {
    "name": "hpEntityMIBTraps",
    "oid": "1.3.6.1.4.1.11.2.14.9.2",
    "class": "objectidentity"
  },
  "hpEntityMIBTrapPrefix": {
    "name": "hpEntityMIBTrapPrefix",
    "oid": "1.3.6.1.4.1.11.2.14.9.2.0",
    "class": "objectidentity"
  },
  "hpEntConfigChange": {
    "name": "hpEntConfigChange",
    "oid": "1.3.6.1.4.1.11.2.14.9.2.0.1",
    "class": "notificationtype",
    "status": "obsolete",
    "description": "An hpEntConfigChange trap is sent when the value of hpEntLastChangeTime changes. It can be utilized by an NMS to trigger logical/physical entity table maintenance polls. An agent must not generate more than one hpEntConfigChange 'trap-event' in a five second period, where a 'trap-event' is the transmission of a single trap PDU to a list of trap destinations. If additional configuration changes occur within the five second 'throttling' period, then these trap-events should be suppressed by the agent. An NMS should periodically check the value of hpEntLastChangeTime to detect any missed hpEntConfigChange trap-events, e.g. due to throttling or transmission loss."
  },
  "hpEntityConformance": {
    "name": "hpEntityConformance",
    "oid": "1.3.6.1.4.1.11.2.14.9.3",
    "class": "objectidentity"
  },
  "hpEntityCompliances": {
    "name": "hpEntityCompliances",
    "oid": "1.3.6.1.4.1.11.2.14.9.3.1",
    "class": "objectidentity"
  },
  "hpEntityGroups": {
    "name": "hpEntityGroups",
    "oid": "1.3.6.1.4.1.11.2.14.9.3.2",
    "class": "objectidentity"
  },
  "hpEntityCompliance": {
    "name": "hpEntityCompliance",
    "oid": "1.3.6.1.4.1.11.2.14.9.3.1.1",
    "class": "modulecompliance",
    "modulecompliance": [
      {
        "object": "hpEntityPhysicalGroup",
        "module": "HP-ENTITY-MIB"
      },
      {
        "object": "hpEntityLogicalGroup",
        "module": "HP-ENTITY-MIB"
      },
      {
        "object": "hpEntityMappingGroup",
        "module": "HP-ENTITY-MIB"
      },
      {
        "object": "hpEntityGeneralGroup",
        "module": "HP-ENTITY-MIB"
      },
      {
        "object": "hpEntityNotificationsGroup",
        "module": "HP-ENTITY-MIB"
      }
    ],
    "status": "obsolete",
    "description": "The compliance statement for SNMP entities which implement the Entity MIB."
  },
  "hpEntityPhysicalGroup": {
    "name": "hpEntityPhysicalGroup",
    "oid": "1.3.6.1.4.1.11.2.14.9.3.2.1",
    "class": "objectgroup",
    "objects": [
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntPhysicalDescr"
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntPhysicalVendorType"
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntPhysicalContainedIn"
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntPhysicalClass"
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntPhysicalParentRelPos"
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntPhysicalName"
      }
    ],
    "status": "obsolete",
    "description": "The collection of objects which are used to represent physical system components, for which a single agent provides management information."
  },
  "hpEntityLogicalGroup": {
    "name": "hpEntityLogicalGroup",
    "oid": "1.3.6.1.4.1.11.2.14.9.3.2.2",
    "class": "objectgroup",
    "objects": [
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntLogicalDescr"
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntLogicalType"
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntLogicalCommunity"
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntLogicalTAddress"
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntLogicalTDomain"
      }
    ],
    "status": "obsolete",
    "description": "The collection of objects which are used to represent the list of logical entities for which a single agent provides management information."
  },
  "hpEntityMappingGroup": {
    "name": "hpEntityMappingGroup",
    "oid": "1.3.6.1.4.1.11.2.14.9.3.2.3",
    "class": "objectgroup",
    "objects": [
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntLPPhysicalIndex"
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntAliasMappingIdentifier"
      },
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntPhysicalChildIndex"
      }
    ],
    "status": "obsolete",
    "description": "The collection of objects which are used to represent the associations between multiple logical entities, physical components, interfaces, and port identifiers for which a single agent provides management information."
  },
  "hpEntityGeneralGroup": {
    "name": "hpEntityGeneralGroup",
    "oid": "1.3.6.1.4.1.11.2.14.9.3.2.4",
    "class": "objectgroup",
    "objects": [
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntLastChangeTime"
      }
    ],
    "status": "obsolete",
    "description": "The collection of objects which are used to represent general entity information for which a single agent provides management information."
  },
  "hpEntityNotificationsGroup": {
    "name": "hpEntityNotificationsGroup",
    "oid": "1.3.6.1.4.1.11.2.14.9.3.2.5",
    "class": "notificationgroup",
    "objects": [
      {
        "module": "HP-ENTITY-MIB",
        "object": "hpEntConfigChange"
      }
    ],
    "status": "obsolete",
    "description": "The collection of notifications used to indicate Entity MIB data consistency and general status information."
  },
  "meta": {
    "comments": [
      "ASN.1 source file:///Users/neermitt/kusanagi/mibs.snmplabs.com/asn1/HP-ENTITY-MIB",
      "Produced by pysmi-0.3.4 at Fri May 24 19:22:19 2019",
      "On host NEERMITT-M-J0NV platform Darwin version 18.6.0 by user neermitt",
      "Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) "
    ],
    "module": "HP-ENTITY-MIB"
  }
}